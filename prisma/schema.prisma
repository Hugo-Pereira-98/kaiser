generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  uid                String    @unique @db.Char(36)
  email              String    @unique
  emailVerifiedAt    DateTime? @map("email_verified_at")
  password           String
  firstName          String    @map("first_name") @db.VarChar(50)
  lastName           String    @map("last_name") @db.VarChar(50)
  gender             String?
  birthdate          DateTime?
  needUpdatePassword Boolean   @default(true) @map("need_update_password")
  isActive           Boolean   @default(true)
  expoToken          String?   @map("expo_token")
  customerId         String?   @map("customer_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  idTokens      IdToken[]
  refreshTokens RefreshToken[]

  familyMember   FamilyMember? @relation(fields: [familyMemberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  familyMemberId Int?

  family   Family? @relation(fields: [familyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  familyId Int?

  @@map("users")
}

model IdToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int      @map("user_id")
  code      String?
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "idtoken_user_id_idx")
  @@map("id_tokens")
}

model RefreshToken {
  id            String   @id @default(uuid())
  refreshToken  String   @unique @map("refresh_token") @db.VarChar(320)
  isBlacklisted Boolean  @default(false)
  userId        Int      @map("user_id")
  expiresDate   DateTime @map("expires_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "refreshtoken_user_id_idx")
  @@map("refresh_tokens")
}

model Family {
  id                  Int    @id @default(autoincrement())
  name                String
  numberOfMembers     Int    @map("number_of_members")
  totalCaloriesPerDay Int?   @map("total_calories_per_day")

  // Restriction
  sugar         Boolean? @map("restriction_sugar")
  peanuts       Boolean? @map("restriction_peanuts")
  treeNuts      Boolean? @map("restriction_tree_nuts")
  lactose       Boolean? @map("restriction_lactose")
  meat          Boolean? @map("restriction_meat")
  spicy         Boolean? @map("restriction_spicy")
  bland         Boolean? @map("restriction_bland")
  flavorful     Boolean? @map("restriction_flavorful")
  chinese       Boolean? @map("restriction_chinese")
  japanese      Boolean? @map("restriction_japanese")
  korean        Boolean? @map("restriction_korean")
  thai          Boolean? @map("restriction_thai")
  vietnamese    Boolean? @map("restriction_vietnamese")
  italian       Boolean? @map("restriction_italian")
  american      Boolean? @map("restriction_american")
  mexican       Boolean? @map("restriction_mexican")
  indian        Boolean? @map("restriction_indian")
  french        Boolean? @map("restriction_french")
  german        Boolean? @map("restriction_german")
  middleEastern Boolean? @map("restriction_middle_eastern")

  // MealPreference 
  breakfastAtHome     Int? @map("breakfast_at_home")
  lunchAtHome         Int? @map("lunch_at_home")
  dinnerAtHome        Int? @map("dinner_at_home")
  breakfastsCooked    Int? @map("breakfasts_cooked")
  breakfastsAssembled Int? @map("breakfasts_assembled")
  lunchesCooked       Int? @map("lunches_cooked")
  lunchesAssembled    Int? @map("lunches_assembled")
  dinnersCooked       Int? @map("dinners_cooked")
  dinnersAssembled    Int? @map("dinners_assembled")

  mealPlans      FamilyMealPlan[]
  familyMembers  FamilyMember[]
  FamilySchedule FamilySchedule?
  User           User[]

  @@map("families")
}

model FamilySchedule {
  id        Int    @id @default(autoincrement())
  familyId  Int    @unique
  family    Family @relation(fields: [familyId], references: [id])
  monday    String
  tuesday   String
  wednesday String
  thursday  String
  friday    String
  saturday  String
  sunday    String

  @@map("family_schedules")
}

model FamilyMember {
  id                            Int                             @id @default(autoincrement())
  firstName                     String
  dateOfBirth                   DateTime                        @map("date_of_birth")
  gender                        String
  height                        Float
  weight                        Float
  activityLevel                 String                          @map("activity_level")
  weightGoal                    String                          @map("weight_goal")
  totalCaloriesPerDay           Int?                            @map("total_calories_per_day")
  familyId                      Int
  family                        Family                          @relation(fields: [familyId], references: [id])
  individualNutrientRequirement IndividualNutrientRequirements?
  User                          User[]

  @@map("family_members")
}

model IndividualNutrientRequirements {
  id                  Int   @id @default(autoincrement())
  familyMemberId      Int?  @unique
  nutrientGuidelineId Int?
  vitaminA            Float @map("vitamin_a")
  vitaminC            Float @map("vitamin_c")
  vitaminE            Float @map("vitamin_e")
  vitaminK            Float @map("vitamin_k")
  vitaminB1           Float @map("vitamin_b1")
  vitaminB2           Float @map("vitamin_b2")
  vitaminB3           Float @map("vitamin_b3")
  vitaminB6           Float @map("vitamin_b6")
  folate              Float @map("folate")
  vitaminB12          Float @map("vitamin_b12")
  totalFiber          Float @map("total_fiber")
  omega3              Float @map("omega_3")
  omega6              Float @map("omega_6")
  protein             Float @map("protein")
  calcium             Float @map("calcium")
  copper              Float @map("copper")
  iron                Float @map("iron")
  magnesium           Float @map("magnesium")
  manganese           Float @map("manganese")
  phosphorus          Float @map("phosphorus")
  selenium            Float @map("selenium")
  zinc                Float @map("zinc")
  potassium           Float @map("potassium")

  familyMember      FamilyMember?       @relation(fields: [familyMemberId], references: [id])
  nutrientGuideline NutrientGuidelines? @relation(fields: [nutrientGuidelineId], references: [id])

  @@map("individual_nutrient_requirements")
}

model NutrientGuidelines {
  id         Int     @id @default(autoincrement())
  groupName  String
  ageRange   String
  sex        String?
  vitaminA   Float   @map("vitamin_a")
  vitaminC   Float   @map("vitamin_c")
  vitaminE   Float   @map("vitamin_e")
  vitaminK   Float   @map("vitamin_k")
  vitaminB1  Float   @map("vitamin_b1")
  vitaminB2  Float   @map("vitamin_b2")
  vitaminB3  Float   @map("vitamin_b3")
  vitaminB6  Float   @map("vitamin_b6")
  folate     Float   @map("folate")
  vitaminB12 Float   @map("vitamin_b12")
  totalFiber Float   @map("total_fiber")
  omega3     Float   @map("omega_3")
  omega6     Float   @map("omega_6")
  protein    Float   @map("protein")
  calcium    Float   @map("calcium")
  copper     Float   @map("copper")
  iron       Float   @map("iron")
  magnesium  Float   @map("magnesium")
  manganese  Float   @map("manganese")
  phosphorus Float   @map("phosphorus")
  selenium   Float   @map("selenium")
  zinc       Float   @map("zinc")
  potassium  Float   @map("potassium")

  individualNutrientRequirements IndividualNutrientRequirements[]

  @@map("nutrient_guidelines")
}

model Recipe {
  id                     Int    @id @default(autoincrement())
  name                   String
  type                   String
  ingredient             String
  itemQuantity           Int    @map("item_quantity")
  itemName               String @map("item_name")
  servingSizeQuantity    Int    @map("serving_size_quantity")
  servingSizeMeasure     String @map("serving_size_measure")
  unitMeasure            String @map("unit_measure")
  unitQuantity           Int    @map("unit_quantity")
  volumeMeasure          String @map("volume_measure")
  volumeQuantity         Int    @map("volume_quantity")
  caloriesKcal           Float  @map("calories_kcal")
  proteinG               Float  @map("protein_g")
  carbohydrateAvailableG Float  @map("carbohydrate_available_g")
  carbohydratesG         Float  @map("carbohydrates_g")
  totalDietaryFiberG     Float  @map("total_dietary_fiber_g")
  dietaryFiber2016G      Float  @map("dietary_fiber_2016_g")
  fatG                   Float  @map("fat_g")
  saturatedFatG          Float  @map("saturated_fat_g")
  transFattyAcidG        Float  @map("trans_fatty_acid_g")
  cholesterolMg          Float  @map("cholesterol_mg")
  sodiumMg               Float  @map("sodium_mg")
  calciumMg              Float  @map("calcium_mg")
  copperMg               Float  @map("copper_mg")
  folateMcg              Float  @map("folate_mcg")
  folateDfeMcgDfe        Float  @map("folate_dfe_mcg_dfe")
  folateFoodMcg          Float  @map("folate_food_mcg")
  ironMg                 Float  @map("iron_mg")
  magnesiumMg            Float  @map("magnesium_mg")
  manganeseMg            Float  @map("manganese_mg")
  omega3                 Float  @map("omega_3")
  omega6                 Float  @map("omega_6")
  phosphorusMg           Float  @map("phosphorus_mg")
  potassiumMg            Float  @map("potassium_mg")
  seleniumMcg            Float  @map("selenium_mcg")
  vitaminA               Float  @map("vitamin_a")
  vitaminC               Float  @map("vitamin_c")
  vitaminE               Float  @map("vitamin_e")
  vitaminK               Float  @map("vitamin_k")
  vitaminB1              Float  @map("vitamin_b1")
  vitaminB2              Float  @map("vitamin_b2")
  vitaminB3              Float  @map("vitamin_b3")
  vitaminB6              Float  @map("vitamin_b6")
  vitaminB12             Float  @map("vitamin_b12")
  zincMg                 Float  @map("zinc_mg")

  @@map("recipes")
}

model Week {
  id        Int      @id @default(autoincrement())
  name      String
  monday    DateTime
  tuesday   DateTime
  wednesday DateTime
  thursday  DateTime
  friday    DateTime
  saturday  DateTime
  sunday    DateTime

  mealPlans FamilyMealPlan[]

  @@map("weeks")
}

model FamilyMealPlan {
  id        Int    @id @default(autoincrement())
  familyId  Int
  weekId    Int
  monday    String @db.VarChar(Max)
  tuesday   String @db.VarChar(Max)
  wednesday String @db.VarChar(Max)
  thursday  String @db.VarChar(Max)
  friday    String @db.VarChar(Max)
  saturday  String @db.VarChar(Max)
  sunday    String @db.VarChar(Max)

  family Family @relation(fields: [familyId], references: [id])
  week   Week   @relation(fields: [weekId], references: [id])

  @@map("family_meal_plans")
}
